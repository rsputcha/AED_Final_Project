/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SystemAdminWorkArea;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Network.Network;
import Magic.design.MyTableFormat;
import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ramsr
 */
public class ManageNetworkJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();

    /**
     *
     * Creates new form ManageNetworkJPanel
     */
    public ManageNetworkJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.system = system;
        tblNetwork.getTableHeader().setDefaultRenderer(new MyTableFormat());
        populateNetworkTable();
    }

    private void populateNetworkTable() {
        DefaultTableModel model = (DefaultTableModel) tblNetwork.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            Object[] row = new Object[3];
            row[0] = network.getName();
            row[1] = network.getState();
            row[2] = network.getCountry();
            model.addRow(row);
        }
    }
    
    public boolean isAlpha(String name) {
    return name.matches("[a-zA-Z]+");
        }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        place_input = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        place_jButton1 = new javax.swing.JButton();
        btnDeleteNetwork = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNetWorkName = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCountry = new javax.swing.JTextField();
        btnCreateNetwork = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNetwork = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(241, 250, 238));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        jPanel4.setPreferredSize(new java.awt.Dimension(250, 400));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setVerifyInputWhenFocusTarget(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        place_input.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        place_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place_inputActionPerformed(evt);
            }
        });
        jPanel4.add(place_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 320, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Search Network");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 326, 36));

        place_jButton1.setText("Search");
        place_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place_jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(place_jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 110, 30));

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 490, 560, 230));

        btnDeleteNetwork.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnDeleteNetwork.setText("Delete Network");
        btnDeleteNetwork.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNetworkActionPerformed(evt);
            }
        });
        add(btnDeleteNetwork, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 400, 180, 40));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setPreferredSize(new java.awt.Dimension(926, 70));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Manage Network");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 948, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(546, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1500, -1));

        jPanel2.setBackground(new java.awt.Color(241, 250, 238));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 400));
        jPanel2.setRequestFocusEnabled(false);
        jPanel2.setVerifyInputWhenFocusTarget(false);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel1.setText("Name:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 103, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel2.setText("State:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 152, -1, -1));

        txtNetWorkName.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtNetWorkName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNetWorkNameActionPerformed(evt);
            }
        });
        jPanel2.add(txtNetWorkName, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 100, 141, -1));

        txtState.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jPanel2.add(txtState, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 149, 141, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel3.setText("Country:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 200, -1, -1));

        txtCountry.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jPanel2.add(txtCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 197, 141, -1));

        btnCreateNetwork.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnCreateNetwork.setText("Create Network");
        btnCreateNetwork.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCreateNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNetworkActionPerformed(evt);
            }
        });
        jPanel2.add(btnCreateNetwork, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 180, 35));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Create Network");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 326, 36));

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 380, 440));

        jScrollPane1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N

        tblNetwork.setBackground(new java.awt.Color(0, 0, 0));
        tblNetwork.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 255, 204)));
        tblNetwork.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        tblNetwork.setForeground(new java.awt.Color(255, 255, 255));
        tblNetwork.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "State", "Country"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNetwork.setFocusable(false);
        tblNetwork.setGridColor(new java.awt.Color(255, 255, 255));
        tblNetwork.setRowHeight(30);
        tblNetwork.setSelectionForeground(new java.awt.Color(204, 255, 204));
        jScrollPane1.setViewportView(tblNetwork);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 520, 270));
    }// </editor-fold>//GEN-END:initComponents

    private void place_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_place_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_place_inputActionPerformed

    private void place_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_place_jButton1ActionPerformed
        // TODO add your handling code here:
        String location = place_input.getText();
        if (location.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a location.");
            return;
        }

        try {
            String encodedLocation = URLEncoder.encode(location, "UTF-8");
            Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                URI uri = new URI("https://www.google.com/maps/search/?api=1&query=" + encodedLocation);
                desktop.browse(uri);
            } else {
                throw new UnsupportedOperationException("Desktop browsing is not supported on this platform.");
            }
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(ManageNetworkJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_place_jButton1ActionPerformed

    private void btnDeleteNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNetworkActionPerformed
        int selectedRow = tblNetwork.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null, new JLabel("Select a network, to delete") , "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int input = JOptionPane.showConfirmDialog(null
            , "Are you sure, you want to delete", "Confirmation"
            ,JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        if (input == 0) {
            for ( Network network :system.getNetworkList()){
                if( network.getName().equals(tblNetwork.getValueAt(selectedRow,0))) {
                    String nName = network.getName();
                    system.getNetworkList().remove(network);
                    JOptionPane.showMessageDialog(null, new JLabel(nName + " network deleted Succesfully!!") , "Error", JOptionPane.ERROR_MESSAGE);
                    populateNetworkTable();
                    return;
                }
            }
        }
        else
        return;
        JOptionPane.showMessageDialog(null, new JLabel("<html><b>Network Name can not be found!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnDeleteNetworkActionPerformed

    private void txtNetWorkNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNetWorkNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNetWorkNameActionPerformed

    private void btnCreateNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNetworkActionPerformed

        if(txtNetWorkName.getText().isEmpty())
        {
            txtNetWorkName.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtNetWorkName.setForeground(Color.red);
        }
        if(txtState.getText().isEmpty())
        {
            txtState.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtState.setForeground(Color.red);
        }
        if(txtCountry.getText().isEmpty())
        {
            txtCountry.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtCountry.setForeground(Color.red);
        }

        String check1 = "";

        if (txtNetWorkName.getText().isEmpty() || txtState.getText().isEmpty() || txtCountry.getText().isEmpty() ){
            //JOptionPane.showMessageDialog(null, "All fields are mandatory!" , "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(null,new JLabel(  "<html><b>All fields are mandatory!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);

            return;
        }
        else{
            for ( Network network :system.getNetworkList()){
                if( network.getName().equals(txtNetWorkName.getText())) {
                    JOptionPane.showMessageDialog(null, new JLabel("<html><b>Network Name can not be same!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);

                    //JOptionPane.showMessageDialog(null, "Network name cannot be same!" , "Error", JOptionPane.ERROR_MESSAGE);
                    check1 = "no";
                    return;
                }}
                if(!isAlpha(txtState.getText()))
                {
                    //JOptionPane.showMessageDialog(null, "State name must be all alphabets." , "Error", JOptionPane.ERROR_MESSAGE);
                    check1 = "no";
                    txtState.setBorder(BorderFactory.createLineBorder(Color.RED));
                    txtState.setForeground(Color.red);

                    JOptionPane.showMessageDialog(null, new JLabel("<html><b>Name of the State must contain only alphabets!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);

                }
                if(!isAlpha(txtCountry.getText()))
                {
                    //JOptionPane.showMessageDialog(null, "Country name must be all alphabets." , "Error", JOptionPane.ERROR_MESSAGE);
                    check1 = "no";
                    txtCountry.setBorder(BorderFactory.createLineBorder(Color.RED));
                    txtCountry.setForeground(Color.red);
                    JOptionPane.showMessageDialog(null, new JLabel("<html><b>Name of the Country must contain only alphabets!</b></html>") , "Error", JOptionPane.ERROR_MESSAGE);

                }

                if( check1.equals("no"))
                {}
                else
                {
                    Network network = system.createAndAddNetwork();
                    network.setName(txtNetWorkName.getText());
                    network.setState(txtState.getText());
                    network.setCountry(txtCountry.getText());
                    populateNetworkTable();

                    JOptionPane.showMessageDialog(null,
                        new JLabel("<html><b>"+ network.getName() + " Network Created!</b></html>"),
                        "Approved",
                        JOptionPane.INFORMATION_MESSAGE,
                        new javax.swing.ImageIcon(getClass().getResource("/images/approved.png")));

                    dB4OUtil.storeSystem(system);

                    txtNetWorkName.setText("");
                    txtState.setText("");
                    txtCountry.setText("");
                }  }
    }//GEN-LAST:event_btnCreateNetworkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateNetwork;
    private javax.swing.JButton btnDeleteNetwork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField place_input;
    private javax.swing.JButton place_jButton1;
    private javax.swing.JTable tblNetwork;
    private javax.swing.JTextField txtCountry;
    private javax.swing.JTextField txtNetWorkName;
    private javax.swing.JTextField txtState;
    // End of variables declaration//GEN-END:variables
}
